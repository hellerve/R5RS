(module "ast"
  (export
    (list "ast" ast))

  (build-value (lambda (category type form)
    (make-hash :category category :type type :value form)))

  (build-function (lambda (form)
    (let ((docstring (if (eq? (length form) 4) (caddr form) "No documentation")))
      (make-hash :type :define-fn
                 :category :callable
                 :name (ast (caadr form))
                 :arguments (map ast (cdadr form))
                 :doc docstring
                 :body (ast (list:last form))))))

  (list->ast (lambda (form)
    (case (car form)
      ((quote)
        (let ((form (cadr form)))
          (if (list? form)
            (build-value :collection :list (map ast form))
            (build-value :simple :symbol form))))
      ((define)
        (if (list? (cadr form))
          (build-function form)
          (make-hash :type :define-val
                     :category :callable
                     :name (cadr form)
                     :binding (ast (caddr form)))))
      ((lambda)
        (let ((docstring (if (eq? (length form) 4) (caddr form) "No documentation")))
          (make-hash :type :lambda
                     :category :callable
                     :arguments (map ast (cadr form))
                     :doc docstring
                     :body (ast (list:last form)))))
      (('module) (make-module form))
      ((begin) (make-hash :type :seq :category :instruction :arguments (map ast (cdr form))))
      ((if) (make-hash :type :if
                       :category :instruction
                       :cond (ast (cadr form))
                       :then (ast (caddr form))
                       :else (ast (get-from form 3 (nil)))))
      (else (make-hash :type :application
                       :function (ast (car form))
                       :arguments (map ast (cdr form)))))))

  (ast (lambda (form)
    (cond
      ((list? form) (list->ast form))
      ((integer? form) (build-value :simple :integer form))
      ((boolean? form) (build-value :simple :boolean form))
      ((float? form) (build-value :simple :float form))
      ((rational? form) (build-value :simple :rational form))
      ((small-int? form) (build-value :simple :int form))
      ((complex? form) (build-value :simple :complex form))
      ((string? form) (build-value :collection :string form))
      ((char? form) (build-value :simple :char form))
      ((vector? form) (build-value :collection :vector (map ast (vector->list form))))
      ((byte-vector? form) (build-value :collection :byte-vector (map ast (byte-vector->list form))))
      ((hash-map? form) (build-value :collection :hash-map
                                     (hash:kv-map (lambda (kv) (map ast kv)) form)))
      ((symbol? form) (build-value :simple :symbol form))
      ((atom? form) (build-value :simple :atom form))
      ((nil? form) (build-value :simple :nil form))
      ((regex? form) (build-value :simple :regex form))
      (else (error "ast:ast" (typeof form) "is a deprecated special form"))))))
