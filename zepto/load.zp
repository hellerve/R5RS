(define *load-params* (make-hash :stdlib "zepto-stdlib/"
                                 :paths (list (++ (zepto:home) "zepto/"))
                                 :parsers #{}))
(define *global-env* (current-env))

(define (zepto:find-on-path file)
  "find a file on the zepto path.

   params:
    - file: the filename to find
   complexity: O(1)
   returns: the filename of the found file or false"
  (let* ((with-ext (++ file ".zp"))
         (native (++ file ".hs"))
         (stdlib (++ (zepto:home) (*load-params* :stdlib) file))
         (stdlib-ext (++ (zepto:home) (*load-params* :stdlib) with-ext)))
  (cond
    ((file-exists? file) (list file #f))
    ((file-exists? with-ext) (list with-ext #f))
    ((file-exists? stdlib) (list stdlib #f))
    ((file-exists? stdlib-ext) (list stdlib-ext #f))
    ((file-exists? native) (list file #t))
    (else
      (let* ((paths (*load-params* :paths))
             (found (reduce
                      (lambda (acc p)
                        (if (truthy? acc)
                          acc
                          (cond 
                            ((file-exists? (++ p file)) (list (++ p file) #f))
                            ((file-exists? (++ p file ".zp")) (list (++ p file ".zp") #f))
                            ((file-exists? (++ p file ".hs")) (list (++ p file) #t))
                            (else acc))))
                      ""
                      paths)))
      (if (truthy? found)
        found
        (begin
          (error "load: Did not find file" file "on the search path")
          #f)))))))

(define (load file . env)
  "loads a file. Optionally takes an environment into which to load the file.

   params:
    - file: the file that should be loaded (must be on the search path)
    - env: the environment into which to load the file (optional)
   complexity: the complexity of parsing and executing the file
   returns: the return value of the file or false"
  (define (iparse file)
    (let* ((firstline (read-line (open-input-file file)))
           (lang (get-from (string:split firstline #\space) 1 "")))
      (if (string:starts-with firstline "#lang")
        (cond
          ((string:empty? lang) (begin (error "Malformed #lang directive:" firstline) #f))
          ((in? (*load-params* :parsers) lang) ((get-from *load-params* (list :parsers lang))
                                                  (read-contents file)))
          (else (begin (error "No parser found for language:" lang) #f)))
        (parse file))))
  (let ((file (zepto:find-on-path file)))
    (cond
      ((falsy? file) (nil))
      ((falsy? (cadr file))
        (let ((env (if (list:null? env) *global-env* (car env)))
              (parsed (iparse (car file))))
          (if (not (eq? parsed #f))
            (foldl (lambda (_ x) (eval x env))
              []
              (macro-expand parsed env))
            #f)))
      (else
        (let ((loaded (load-native (car file)))
              (env (if (list:null? env) *global-env* (car env))))
          (map ($ (eval `(define ,(string->symbol (car %))
                          (lambda args ,(cadr %)
                            (apply ,(caddr %) args))) env))
               loaded))))))

(define (zepto:add-to-path path)
  "adds a directory/file to the zepto search path.

   params:
     - path: the path to add
   complexity: O(1)
   returns: the new *load-params*"
  (hash:update! *load-params* :paths (lambda (p) (++ p path))))

(define (zepto:remove-from-path path)
  "removes a directory/file to the zepto search path.

   params:
     - path: the path to remove
   complexity: O(1)
   returns: the new *load-params*"
  (hash:update! *load-params* :paths (lambda (p) (list:remove p path))))

(define (zepto:implements-lang f lang)
  "registers a function <par>f</par> to the parser that implements the language <par>lang</lang>.

   params:
    - f: the function
    - lang: the language that is implemented
   complexity: O(1)
   returns: the new *load-params*"
  (hash:update! *load-params* :parsers (lambda (p) (hash:set p lang f))))

(let ((zepto-rc ".zeptorc"))
  (if (file-exists? zepto-rc)
    (load zepto-rc)))

(let ((zepto-rc (++ (os:get-home-dir) "/.zeptorc")))
  (if (file-exists? zepto-rc)
    (load zepto-rc)))
