(load "zepto/compiler/ast")
(load "zepto/compiler/nanopass")
(load "zepto/erl/core")
(load "argparse/argparse")
(import-all "argparse")

(define *backends* (make-hash :erl (import "core:ast->core")))
(define *descr-string* "this is an experimental pluggable compiler for zepto")
(define *options* [#{"name" "backend"
                     "default" "erl"
                     "usage" "the backend that should be used"}])

(define (compile backend program)
  ((*backends* backend) ((import "nanopass:optimize")
                          (map (lambda (x) ((import "ast:ast") x)) (parse program)))
                        (head (string:split (list:last (string:split program "/")) ".zp"))))

(let ((name (head zepto:args))
      (args (argparse:handle-args *descr-string* *options*)))
  (compile (string->symbol (++ ":" (args "backend"))) name))
