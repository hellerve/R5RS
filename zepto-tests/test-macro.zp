(load "zepto-tests/unit.zp")

(define-syntax my-let 
  (syntax-rules ()
    ((my-let x)
	(begin x))))
(define x "hello, world")

(assert-equal (lambda () (my-let 2)) 2)
(assert-equal (lambda () (my-let x)) "hello, world")
(assert-equal (lambda () (my-let (+ 1 2 3 4 5))) 15)


(define-syntax test (syntax-rules () ((test 1 ...) (list 1))))

(assert-equal (lambda () (test 1)) '(1))
(assert-equal (lambda () (test 1 1 1 1 1 1 1 1 1 1)) '(1))

(define-syntax test (syntax-rules () ((test 1 ... 2) (list 1 2))))
(assert-equal (lambda () (test 2)) '(1 2))
(assert-equal (lambda () (test 1 2)) '(1 2))
(assert-equal (lambda () (test 1 1 1 1 2)) '(1 2))

(define-syntax test (syntax-rules () ((test 1 ... 2 ... 3) (list 1 2 3))))
(assert-equal (lambda () (test 3)) '(1 2 3))
(assert-equal (lambda () (test 2 3)) '(1 2 3))
(assert-equal (lambda () (test 1 2 3)) '(1 2 3))
(assert-equal (lambda () (test 1 1 1 2 2 2 3)) '(1 2 3))

(define-syntax test (syntax-rules () ((test x ...) (list 1))))
(assert-equal (lambda () (test "hello, world!" (+ 1 2 3) x)) '(1))
(assert-equal (lambda () (test "hello, world!" 1 2 3)) '(1))

(define-syntax test (syntax-rules () ((test x ...) (list x ...))))
(assert-equal (lambda () (test "hello, world!")) '("hello, world!"))
(assert-equal (lambda () (test 3 2 1)) '(3 2 1))
(assert-equal (lambda () (test 'a 'b "c")) '(a b "c"))

(define-syntax test (syntax-rules () ((_ (1 2) (3 x)) (list x))))
(assert-equal (lambda () (test (1 2) (3 4))) '(4))

(define-syntax test (syntax-rules () ((_ (1 2) (3 . x)) (list x))))
(assert-equal (lambda () (test (1 2) (3 . 4))) '(4))

(define-syntax my-let
  (syntax-rules ()
    ((_ e1 ...)
    ((lambda () e1 ...)))))
(assert-equal (lambda () (my-let (+ 1 2))) 3)

(assert-equal (lambda () (let ((x 1) (y 2) (z 3)) (+ x y z))) 6)
(assert-equal (lambda () (let ((x 11) (y 22) (z 34)) (+ x y z))) 67)
(assert-equal (lambda () (let ((x (* 1 2 3 4)) (y 22) (z 34)) (+ x y z))) (+ 24 22 34))

(assert-equal (lambda () (let () (let ((x 1)) x))) 1)
(assert-equal (lambda () ((lambda () (let ((x 1)) x)))) 1)

(assert-equal (lambda () (let* () 1)) 1)
(assert-equal (lambda () (let* ((x 1)) x)) 1)
(assert-equal (lambda () (let* ((x 1) (y x)) (+ x y))) 2)
(assert-equal (lambda () (let* ((x 1)
                                (y x)
                                (z (+ x y))) (* x y z))) (* 1 1 2))
(assert-equal (lambda () 
  (letrec ((even?
          (lambda (n)
            (if (zero? n)
                #t
                (odd? (- n 1)))))
         (odd?
          (lambda (n)
            (if (zero? n)
                #f
                (even? (- n 1))))))
   (even? 89)))
  #f)

(assert-equal (lambda () 
  (letrec ((even?
          (lambda (n)
            (if (zero? n)
                #t
                (odd? (- n 1)))))
         (odd?
          (lambda (n)
            (if (zero? n)
                #f
                (even? (- n 1))))))
   (odd? 88)))
  #f)

(assert-equal (lambda ()
  (let loop ((numbers '(3 2 1 6 5))
           (nonneg '())
           (neg '()))
    (cond ((null? numbers) (list nonneg neg))
          ((>= (car numbers) 0)
           (loop (cdr numbers)
                 (cons (car numbers) nonneg)
                  neg))
          ((< (car numbers) 0)
           (loop (cdr numbers)
                 nonneg
                 (cons (car numbers) neg))))))
 '((5 6 1 2 3) ()))

(unit-test-handler-results)
(unit-test-all-passed)
